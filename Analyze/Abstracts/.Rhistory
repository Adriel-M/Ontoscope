> head(d)
A           B          C           D          E           F
gene1 -1.0362235  0.82685836 -0.3053555 -1.25348438 -1.1167804 -0.21246920
gene2 -1.0280138 -0.10380856 -0.4725301 -0.02306777 -0.6119725  0.10499482
gene3 -1.2072158 -0.09147717  0.2429783  0.18397650 -0.5749762 -0.82854688
gene4  1.3769346 -0.34478739 -1.6498159 -0.04752349 -0.3759327  0.04173142
gene5 -0.8177475 -0.20440739 -1.4889405  0.50194321  0.9544585  1.23902602
gene6  0.5511526  0.62477829 -0.2677255 -0.74236524 -0.1572775  0.91825030
G          H          I           J
gene1 -0.9427938 -1.4545177 -1.0756554 -0.08241979
gene2 -1.7248344 -2.2090110 -1.5504237 -0.19954993
gene3  0.2018804  1.7318818 -1.8288649  0.58678452
gene4  0.2948888 -0.2522309 -1.1669122 -0.60243273
gene5  1.0042703  0.5899186 -0.4196320 -0.66348636
gene6  2.3309169 -1.0491888  0.3506227 -0.71594841
d <- matrix(rnorm(1000),100)
rownames(d) <- paste("gene",1:100,sep="")
colnames(d) <- LETTERS[1:10]
head(d)
heatmap(d)
d <- d[1:7,]
heatmap(d)
head(MergedList)
#NormalizeTF.R
#NormalizeTF.R
#JTB2020/BCH441 Class Project
#Normalization Module, TF Submodule
#
#Purpose: Extract a list of transcription factors derived from the union of at
#         least three transcription factor datasets of five (see below).
#Version: v1.0
#Date:    2016-02-12
#Author:  Shivani Kamdar
#
#Input:   csv files (provided in .zip), html. See Step II for normalization of terms.
#Output:  List of transcription factors (.txt format)
#
#ToDo:
#Notes:   Requires Bioconductor to work properly. Should install dependency
#         "biomaRt" automatically if you don't have it. Let me know if there are
#         any issues.
#
# ====================================================================
#Step I. Extracting transcription factor lists
#TF1 - TFs from the TFCAT database (2009)
#TF2 - TFs from the DBD database (2008)
#TF3 - Manually curated list of TFs cited in the MOGRIFY paper. See link. (2009)
#TF4 - FANTOM5 list of transcription factors (2014-2015)
#TF5 - The ENCODE list of transcription factors, derived from their list of putative TF antibodies (2012)
#Code to import and format tables:
#TF1 - As TFCAT outputs temporary tables only, we need to first download the files (provided here)
#TF1A - Annotated, manually literature-validated transcription factors. I have used only definite "TF Genes" and not the more vague "TF Gene Candidates" here.
TF1A <- read.table("TFCatA.csv", header=TRUE, fill=TRUE, sep=",")
for (i in 1:nrow(TF1A)) {
if (TF1A$Gene.ID[i]=="")
TF1A$Gene.ID[i] <- TF1A$Gene.ID[i-1]
}
TF1A <- TF1A[,-c(2:3, 6:7)]
TF1A <- TF1A[(grep("human", TF1A$Species, ignore.case=TRUE)),]
TF1A <- TF1A[(unique(TF1A$Gene.ID)),]
#TF1B - Predicted transcription factors as determined by mouse-human homology clusters
TF1B <- read.table("TFCatB.csv", header=TRUE, fill=TRUE, sep=",")
TF1B <- TF1B[,3:4]
#Merge the two tables, noting which TFs are identified by homology only (TF1B) and not literature search validated (TF1A)
TF1 <- merge(x = TF1A, y=TF1B, by="Gene.ID", by.TF1B="Gene.ID", all.y=TRUE)
TF1 <- TF1[(unique(TF1$Gene.Symbol)),]
TF1 <- TF1[,c(1,8)]
#Note that all homology-only TFs now have <NA> values in the Gene.ID column.
#Now writing TF2
TF2 <- read.table("DBD_TFs.csv", header=FALSE, skip=1, fill=TRUE, sep=",")
dbdcols <- c("MarkovID", "EnsemblID", "MatchRegion", "Family")
colnames(TF2) <- dbdcols
TF2 <- TF2[(unique(TF2$EnsemblID)),]
#Annotate TF2 with gene names from Ensembl IDs, using biomaRt and installing if not already there
source("https://bioconductor.org/biocLite.R")
if(require(biomaRt) == FALSE) {
biocLite("biomaRt")
}
getwd()
Score0 <- c("32. 0")
Score0 <- c("32, 0")
Score0 <- c(32, 0)
Score1 <- c(51, 21)
Score2 <- c(2 892)
Score2 <- c(22, 89)
hmCversus <- data.frame(Score0, Score1, Score2)
hmCversus
rownames(hmCversus) <- c("Cancer", "Normal")
chisq.test(hmCversus)
chisq.test(hmCversus$Score0)
chisq.test(hmCversus$Score1)
chisq.test(hmCversus$Score2)
Score0 <- c(35, 0)
Score1 <- c(67, 25
)
Score2 <- c(25, 102)
hmCversus <- data.frame(Score0, Score1, Score2)
rownames(hmCversus) <- c("Cancer", "Normal")
chisq.test(hmCversus)
chisq.test(hmCversus$Score0)
chisq.test(hmCversus$Score1)
chisq.test(hmCversus$Score2)
getwd()
install.packages("reutils")
install.packages("XML")
library("reutils")
?esearch
TFList <- c("TP53", "MYC", "TP63", "TP73")
esearch(TFList[1], usehistory=TRUE)
?efetch
efetch(uid=esearch(TFList[1], usehistory=TRUE), db="pubmed", rettype="abstract", retmode="text", outfile="One.txt")
uid <- esearch(TFList[i], usehistory=TRUE)
uid <- esearch(TFList[1], usehistory=TRUE)
efetch(uid, db="pubmed", rettype="abstract", retmode="text", outfile="One.txt")
uid <- esearch(TFList[1], db='pubmed', usehistory=TRUE)
efetch(uid, rettype="abstract", retmode="text", outfile="One.txt")
getwd()
install.packages("pubmedMineR")
install.packages("PubmedMineR")
install.packages("pubmed.MineR")
install.packages("pubmed.mineR")
library("pubmed.mineR")
?readabs
readabs("One.txt")
abstracts <- readabs("%sFileNaming.txt")
abstracts <- readabs("One.txt")
Test <- getabs(abstracts, "cardiac", FALSE)
Test
Test$PMID
?getabs
length(Test)
Test@Journal
length(Test@Journal)
?expand.grid
expand.grid("TFList", KEEP.OUT.ATTRS = FALSE)
expand.grid("TFList")
expand.grid(TFList, KEEP.OUT.ATTRS = FALSE)
Test <- getabs(abstracts, "fibroblast", FALSE)
BGVals <- as.numeric(vector())
TargetVals <- as.numeric(vector())
for (i in 1:length(TFList)) {
uid <- esearch(TFList[i], db='pubmed', usehistory=TRUE)
FileNaming <- TFList[i]
efetch(uid, rettype="abstract", retmode="text", outfile="%sFileNaming.txt")
abstracts <- readabs("%sFileNaming.txt")
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals <- length(CountOccurrence@Abstract)
}
?read.table
nameout <- "%sFileNaming.txt"
%sFileNaming
FileNaming
FileNaming.txt
efetch(uid, rettype="abstract", retmode="text", outfile=("%s.txt", FileNaming))
efetch(uid, rettype="abstract", retmode="text", outfile=sprintf("%s.txt", FileNaming))
library("biomaRt")
ensemblmart <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters <- listFilters(ensemblmart)
attributes <- listAttributes(ensemblmart)
filters
?getBM
attributes
head(attributes)
TFList <- read.table("Transcription Factor List.txt", sep="\t")
getwd()
setwd("C:/Users/snk/BCB420/dev")
setwd("C:/Users/snk/Desktop/BCB420/dev")
TFList <- read.table("Transcription Factor List.txt", sep="\t")
setwd("./Pubmed Abstracts")
setwd("~/Pubmed Abstracts")
setwd("~/Abstracts")
getwd()
setwd("C:/Users/snk/Desktop/BCB420/dev/Abstracts")
setwd("C:/Users/snk/Desktop/BCB420/dev/Analyze/Abstracts")
for (i in 1:length(TFList)) {
uid <- esearch(TFList[i], db='pubmed', usehistory=TRUE)
FileNaming <- TFList[i]
efetch(uid, rettype="abstract", retmode="text", outfile=sprintf("%s.txt", FileNaming))}
TFList
str(TFList)
TFList <- read.table("Transcription Factor List.txt", sep=",")
head(TFList)
TFList <- read.table("Transcription Factor List.txt", sep=(","|"\t"))
setwd("../")
getwd()
setwd("../")
#NormalizeTF.R
#JTB2020/BCH441 Class Project
#Normalization Module, TF Submodule
#
#Purpose: Extract a list of transcription factors derived from the union of at
#         least three transcription factor datasets of five (see below).
#Version: v1.0
#Date:    2016-02-12
#Author:  Shivani Kamdar
#
#Input:   csv files (provided in .zip), html. See Step II for normalization of terms.
#Output:  List of transcription factors (.txt format)
#
#ToDo:
#Notes:   Requires Bioconductor to work properly. Should install dependency
#         "biomaRt" automatically if you don't have it. Let me know if there are
#         any issues.
#
# ====================================================================
#Step I. Extracting transcription factor lists
#TF1 - TFs from the TFCAT database (2009)
#TF2 - TFs from the DBD database (2008)
#TF3 - Manually curated list of TFs cited in the MOGRIFY paper. See link. (2009)
#TF4 - FANTOM5 list of transcription factors (2014-2015)
#TF5 - The ENCODE list of transcription factors, derived from their list of putative TF antibodies (2012)
#Code to import and format tables:
#TF1 - As TFCAT outputs temporary tables only, we need to first download the files (provided here)
#TF1A - Annotated, manually literature-validated transcription factors. I have used only definite "TF Genes" and not the more vague "TF Gene Candidates" here.
TF1A <- read.table("TFCatA.csv", header=TRUE, fill=TRUE, sep=",")
for (i in 1:nrow(TF1A)) {
if (TF1A$Gene.ID[i]=="")
TF1A$Gene.ID[i] <- TF1A$Gene.ID[i-1]
}
TF1A <- TF1A[,-c(2:3, 6:7)]
TF1A <- TF1A[(grep("human", TF1A$Species, ignore.case=TRUE)),]
TF1A <- TF1A[(unique(TF1A$Gene.ID)),]
#TF1B - Predicted transcription factors as determined by mouse-human homology clusters
TF1B <- read.table("TFCatB.csv", header=TRUE, fill=TRUE, sep=",")
TF1B <- TF1B[,3:4]
#Merge the two tables, noting which TFs are identified by homology only (TF1B) and not literature search validated (TF1A)
TF1 <- merge(x = TF1A, y=TF1B, by="Gene.ID", by.TF1B="Gene.ID", all.y=TRUE)
TF1 <- TF1[(unique(TF1$Gene.Symbol)),]
TF1 <- TF1[,c(1,8)]
#Note that all homology-only TFs now have <NA> values in the Gene.ID column.
#Now writing TF2
TF2 <- read.table("DBD_TFs.csv", header=FALSE, skip=1, fill=TRUE, sep=",")
dbdcols <- c("MarkovID", "EnsemblID", "MatchRegion", "Family")
colnames(TF2) <- dbdcols
TF2 <- TF2[(unique(TF2$EnsemblID)),]
#Annotate TF2 with gene names from Ensembl IDs, using biomaRt and installing if not already there
source("https://bioconductor.org/biocLite.R")
if(require(biomaRt) == FALSE) {
biocLite("biomaRt")
}
library("biomaRt")
ensemblmart <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
filters <- listFilters(ensemblmart)
attributes <- listAttributes(ensemblmart)
TF2 <- getBM(attributes=c('ensembl_peptide_id', 'hgnc_symbol'), filters='ensembl_peptide_id', values=TF2$EnsemblID, mart=ensemblmart)
#TF3 has a permanent link that we can download from, and needs little cleanup.
TF3 <- read.table("http://www.nature.com/nrg/journal/v10/n4/extref/nrg2538-s3.txt", header=TRUE, sep="\t", skip=11, fill=TRUE)
TF3 <- TF3[,c(2,5:7)]
#TF4 and TF5 need relatively little work, but once again, there is no permalink to these tables.
TF4 <- read.csv("FANTOM5_TFList.csv", header=TRUE, fill=TRUE)
TF4 <- TF4[,-(3:5)]
TF5 <- read.table("ENCODE_TF_ABDerived.csv", header=TRUE, fill=TRUE, skip=1, sep=",")
TF5 <- TF5[(grep("human", TF5$Documents, ignore.case=TRUE)),]
TF5 <- TF5[,3:4]
# ====================================================================
#Step II. Making our lives easier
#Let's change all of the colnames and values to be more descriptive and easier to merge - Gene.Symbol is most descriptive, so I'll go with that.
TF1$Gene.Symbol <- toupper(TF1$Gene.Symbol)
colnames(TF2) <- c("EnsemblProteinID", "Gene.Symbol")
colnames(TF3) <- c("EnsemblGeneID", "InterproDBFamily", "Gene.Symbol", "Tissue")
colnames(TF4) <- c("EntrezID", "Gene.Symbol")
colnames(TF5) <- c("Gene.Symbol", "TargetDescription")
#TF1's "Gene.ID" column is meant to be NCBI ID, but since we expanded it all the way down to allow for easy merge when constructing the table, the IDs may not necessarily be correct. We'll remove this from the final table.
#For now (v0.1), I'll make two sets of tables - one including relevant information so we have access to it if we want it, and one with just the transcription factor names. We'll merge both sets.
#Here's set 2:
TFCat <- c(rep("Yes", times=nrow(TF1)))
TFA <- data.frame(TF1$Gene.Symbol, TFCat)
colnames(TFA)[1] <- "Gene.Symbol"
DBD <- c(rep("Yes", times=nrow(TF2)))
TFB <- data.frame(TF2$Gene.Symbol, DBD)
colnames(TFB)[1] <- "Gene.Symbol"
Manual <- c(rep("Yes", times=nrow(TF3)))
TFC <- data.frame(TF3$Gene.Symbol, Manual)
colnames(TFC)[1] <- "Gene.Symbol"
FANTOM5 <- c(rep("Yes", times=nrow(TF4)))
TFD <- data.frame(TF4$Gene.Symbol, FANTOM5)
colnames(TFD)[1] <- "Gene.Symbol"
ENCODE <- c(rep("Yes", times=nrow(TF5)))
TFE <- data.frame(TF5$Gene.Symbol, ENCODE)
colnames(TFE)[1] <- "Gene.Symbol"
# ====================================================================
#Step III. Joining transcription factor lists
#First, the union list of transcription factors.
ListA <- list(TFA, TFB, TFC, TFD, TFE)
MergedList <- merge(ListA[1], ListA[2], all=TRUE)
for (i in 3:length(ListA)){
MergedList <- merge(MergedList, ListA[i], all=TRUE)
MergedList <- MergedList[(!MergedList$Gene.Symbol==""),]
}
#Next, for reference, the union list of transcription factors with additional information.
ListB <- list(TF1, TF2, TF3, TF4, TF5)
RefList <- merge(ListB[1], ListB[2], all=TRUE)
for (i in 3:length(ListB)){
RefList <- merge(RefList, ListB[i], all=TRUE)
RefList <- RefList[(!RefList$Gene.Symbol==""),]
}
# ====================================================================
#Step IV. Find those TFs present in 2 of the 5 TF datasets.
#         As the FANTOM5 and manually curated lists account for most of the
#         TFs present in the list, we shall use a cutoff of 2 to make sure that
#         we do not lose TFs that may not have been present in older databases
#         (DBD, TFCat) or were not specifically tested by ENCODE (~300 TFs)
for (i in 1:nrow(MergedList)){
MergeCount <- MergedList[i,]=="Yes"
MergedList$Count[i] <- length(which(MergeCount=="TRUE"))
}
TFList <- unique(MergedList[MergedList$Count=="2"|MergedList$Count=="3"|MergedList$Count=="4"|MergedList$Count=="5",])$Gene.Symbol
remove(ensemblmart)
remove(DBD|dbdcols|ENCODE|FANTOM5)
remove(DBD)
remove(FANTOM5)
remove(i)
remove(ListA)
remove(ListB)
remove(Manual)
remove(TF1)
remove(MergedList)
remove(MergeCount)
remove(filters)
remove(attributes)
remove(TF1A)
remove(TF1B)
remove(TF2)
remove(TF3)
remove(TF4)
remove(TF5)
remove(TFA)
remove(TFB)
head(TFList)
setwd("~/Analyze/Abstracts")
getwd()
setwd("./Analyze/Abstracts")
for (i in 1:length(TFList)) {
uid <- esearch(TFList[i], db='pubmed', usehistory=TRUE)
FileNaming <- TFList[i]
efetch(uid, rettype="abstract", retmode="text", outfile=sprintf("%s.txt", FileNaming))}
TFList <- as.character(TFList)
for (i in 1:length(TFList)) {
uid <- esearch(TFList[i], db='pubmed', usehistory=TRUE)
FileNaming <- TFList[i]
efetch(uid, rettype="abstract", retmode="text", outfile=sprintf("%s.txt", FileNaming))}
for (i in 424:length(TFList)) {
uid <- esearch(TFList[i], db='pubmed', usehistory=TRUE)
FileNaming <- TFList[i]
efetch(uid, rettype="abstract", retmode="text", outfile=sprintf("%s.txt", FileNaming))}
require(reutils)
IsThere <- require(reutils)
?esearch
uid <- esearch("Jun[tw]", db='pubmed', usehistory=TRUE)
efetch(uid, rettype="abstract", retmode="text", outfile="Jun.txt")
uid <- esearch("TFList[423][tw]", db='pubmed', usehistory=TRUE)
TFList[423]
head(TFList)
uid <- esearch(TFList[423][tw], db='pubmed', usehistory=TRUE)
uid <- esearch("Jun[tw]", db='pubmed', usehistory=TRUE)
efetch(uid, rettype="abstract", retmode="text", outfile="Jun.txt")
getwd()
for (i in 1:length(TFList)) {
abstracts <- readabs("%s.txt", FileNaming)
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CountOccurrence@Abstract)
}
for (i in 1:length(TFList)) {
FileNaming <- TFList[i]
abstracts <- readabs("%s.txt", FileNaming)
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CountOccurrence@Abstract)
}
BGVals <- as.numeric(vector())
TargetVals <- as.numeric(vector())
for (i in 1:length(TFList)) {
FileNaming <- TFList[i]
abstracts <- readabs("%s.txt", FileNaming)
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CountOccurrence@Abstract)
}
for (i in 1:length(TFList)) {
FileNaming <- TFList[i]
abstracts <- readabs(sprintf("%s.txt", FileNaming))
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CountOccurrence@Abstract)
}
setwd("../")
getwd()
?data.frame
ConRank <- data.frame(BGVals, TargetVals)
ConRank
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals)
ConRank
RatioVals <- BGVals/TargetVals
setwd("./Abstracts")
abstracts <- readabs("JUN.txt", FileNaming))
abstracts <- readabs("Jun.txt")
length(abstracts)
Abstract@abstracts
CountLen <- getabs(abstracts, FALSE)
length(abstracts@Abstract)
?sort
?order
setwd("./Abstracts")
for (i in 1:4) {
FileNaming <- TFList[i]
abstracts <- readabs(sprintf("%s.txt", FileNaming))
LengthVals[i] <- length(abstracts@Abstract)
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CounTarget@Abstract)
}
LengthVals <- as.numeric(vector())
for (i in 1:length(TFList)) {
FileNaming <- TFList[i]
abstracts <- readabs(sprintf("%s.txt", FileNaming))
LengthVals[i] <- length(abstracts@Abstract)
CountOccurrence <- getabs(abstracts, "fibroblast", FALSE)
BGVals[i] <- length(CountOccurrence@Abstract)
CounTarget <- getabs(abstracts, "cardiac", FALSE)
TargetVals[i] <- length(CounTarget@Abstract)
}
setwd("../")
RatioVals <- BGVals/TargetVals
ConRank <- data.frame(TFList, BGVals, TargetVals, RatioVals, LengthVals)
ConRank
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank
ConRank <- ConRank[order(RatioVals, LengthVals)]
ConRank
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank <- ConRank[order(RatioVals, LengthVals),]
ConRank
ConRank <- ConRank[order(-RatioVals, LengthVals),]
ConRank
ConRank <- data.frame(TFList, BGVals, TargetVals, RatioVals, LengthVals)
ConRank <- ConRank[order(-RatioVals, -LengthVals)]
ConRank
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank <- ConRank[order(-RatioVals, -LengthVals)]
ConRank
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank
ConRank <- ConRank[order(RatioVals),]
ConRank
ConRank <- ConRank[order(-RatioVals),]
ConRank
?order
ConRank <- ConRank[order(RatioVals, decreasing=TRUE),]
ConRank
ConRank <- ConRank[order(COnRank$RatioVals, decreasing=TRUE),]
ConRank <- ConRank[order(ConRank$RatioVals, decreasing=TRUE),]
ConRank
ConRank <- ConRank[order(ConRank$RatioVals, ConRank$LengthVals, decreasing=TRUE),]
ConRank
RatioVals <- c(1,1,2,2)
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank <- ConRank[order(ConRank$RatioVals, ConRank$LengthVals, decreasing=TRUE),]
ConRank
ConfidenceScore <- as.numeric(vector())
ConRank <- data.frame(ConRank, ConfidenceScore)
ConfidenceScore <- as.numeric(vector(1:nrow(ConRank)))
ConfidenceScore <- as.numeric(vector(rep(1, nrow(ConRank))))
ConfidenceScore <- as.numeric(vector(rep.int(1, nrow(ConRank))))
nrow(ConRank)
rep(1, nrow(ConRank))
ConfidenceScore <- c(rep(1, nrow(ConRank)))
ConfidenceScore
ConRank <- data.frame(ConRank, ConfidenceScore)
ConRank
RatioVals <- BGVals/TargetVals
ConRank <- data.frame(TFList[1:4], BGVals, TargetVals, RatioVals, LengthVals)
ConRank <- ConRank[order(ConRank$RatioVals, ConRank$LengthVals, decreasing=TRUE),]
ConfidenceScore <- c(rep(1, nrow(ConRank)))
ConRank <- data.frame(ConRank, ConfidenceScore)
#Assign any TF with ratio <1 a score of 0.
ConRank$ConfidenceScore[ConRank$RatioVals < 1] <- 0
ConRank
ConRank$ConfidenceScore[ConRank$LengthVals < 44] <- NA
ConRank
abstracts <- readabs("AR.txt")
setwd("./Abstracts")
abstracts <- readabs("AR.txt")
length(abstracts@Abstract)
getabs(abstracts, "prostate", TRUE)
uid <- esearch("AR[tw]", db='pubmed', usehistory=TRUE)
efetch(uid, rettype="abstract", retmode="text", outfile="AR.txt")
abstracts <- readabs("AR.txt")
length(abstracts@Abstract)
getabs(abstracts, "prostate", TRUE)
length(abstracts@Abstract)
length((getabs(abstracts, "prostate", TRUE))@Abstract)
ConRank
PercentHits <- TargetVals/LengthVals
remove(Test)
ConRank <- data.frame(ConRank, PercentHits)
ConRank
remove(abstracts)
PercentHits/0.121
ConRank$ConfidenceScore <- PercentHits/0.121
ConRank
ConRank$ConfidenceScore[ConRank$RatioVals < 1] <- 0
ConRank$ConfidenceScore[ConRank$LengthVals < 44] <- NA
?data.frame
?write.table
